{"version":3,"sources":["calculator.js","reportWebVitals.js","index.js"],"names":["InputBox","useState","displayValue","setdisplay","operator","setoperator","number1","setnumber","SetNumber","num","className","type","onChange","e","target","value","readOnly","map","n","onClick","parseFloat","num1","console","log","this","AddDecimal","AddNumber","DiffNumber","MultiplyNumber","DivideNumber","num2","Equal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAyGeA,MAtGf,WAAqB,IAAD,EACmBC,mBAAS,IAD5B,mBACTC,EADS,KACKC,EADL,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGaJ,mBAAS,GAHtB,mBAGTK,EAHS,KAGAC,EAHA,KAuEhB,SAASC,EAAUC,GACfN,EAAW,GAAKD,EAAeO,GASnC,OACQ,sBAAKC,UAAU,YAAf,UACI,uBAAOC,KAAK,UAAUD,UAAU,UAAUE,SAAU,SAACC,GAAD,OAAOV,EAAWU,EAAEC,OAAOC,QAAQA,MAAOb,EAAcc,UAAQ,IACpH,uBA/EM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,EAAG,GAiFrBC,KAAI,SAAAC,GAAC,OACX,wBAAQR,UAAU,MAAcS,QAAS,kBAAMX,EAAUY,WAAWF,KAApE,SAA2EA,GAA9CA,MAIrC,wBAAQR,UAAU,MAAMS,QAAS,kBAxD7C,SAAoBE,GAChBA,GAAc,IACdC,QAAQC,WAAWC,KAAO,MAAQH,GAClCd,EAAUc,GACVlB,EAAWkB,GAoDoCI,CAAWL,WAAWlB,KAA7D,eACA,wBAAQQ,UAAU,MAAMS,QAAS,kBArF7C,SAAmBE,GACfC,QAAQC,WAAWC,KAAO,MAAQH,GAClCd,EAAUc,GACVhB,EAAY,KACZF,EAAW,GAiFoCuB,CAAUN,WAAWlB,KAA5D,eACA,wBAAQQ,UAAU,MAAMS,QAAS,kBA/E7C,SAAoBE,GAChBC,QAAQC,WAAWC,KAAO,MAAQH,GAClCd,EAAUc,GACVhB,EAAY,KACZF,EAAW,GA2EoCwB,CAAWP,WAAWlB,KAA7D,eACA,wBAAQQ,UAAU,MAAMS,QAAS,kBAzE7C,SAAwBE,GACpBC,QAAQC,WAAWC,KAAO,MAAQH,GAClCd,EAAUc,GACVhB,EAAY,KACZF,EAAW,GAqEoCyB,CAAeR,WAAWlB,KAAjE,eACA,wBAAQQ,UAAU,MAAMS,QAAS,kBAnE7C,SAAsBE,GAClBC,QAAQC,WAAWC,KAAO,MAAQH,GAClCd,EAAUc,GACVhB,EAAY,KACZF,EAAW,GA+DoC0B,CAAaT,WAAWlB,KAA/D,eACA,wBAAQQ,UAAU,MAAMS,QAAS,kBAtD7C,SAAeW,GAKX,OAJAvB,EAAUa,WAAWd,IACrBwB,EAAOV,WAAWU,GAClBR,QAAQC,IAAI,cAAgBjB,GAC5BgB,QAAQC,IAAI,cAAgBO,GACpB1B,GACJ,IAAK,IACDD,EAAWG,EAAUwB,GACrB,MACJ,IAAK,IACD3B,EAAWG,EAAUwB,GACrB,MACJ,IAAK,IACD3B,EAAWG,EAAUwB,GACrB,MACJ,IAAK,IAEG3B,EADO,GAAR2B,EACY,qBAGAxB,EAAUwB,GAEzB,MACJ,QACI3B,EAAWD,GAEnBG,EAAY,IA4BmC0B,CAAMX,WAAWlB,KAAxD,eACA,wBAAQQ,UAAU,YAAYS,QAAS,kBArB/CX,EAAU,GACVL,EAAW,QACXE,EAAY,KAmBJ,uBCxFD2B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb8d72f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nfunction InputBox() {\r\n    const [displayValue, setdisplay] = useState('');\r\n    const [operator, setoperator] = useState('');\r\n    const [number1, setnumber] = useState(0);\r\n\r\n    const listofnum = [1, 2, 3, 4, 5, 6, 7 , 8, 9, 0];\r\n\r\n    function AddNumber(num1) {\r\n        console.log(typeof this + ' : ' + num1);\r\n        setnumber(num1);\r\n        setoperator('+');\r\n        setdisplay(0);\r\n    }\r\n\r\n    function DiffNumber(num1) {\r\n        console.log(typeof this + ' : ' + num1);\r\n        setnumber(num1);\r\n        setoperator('-');\r\n        setdisplay(0);\r\n    }\r\n\r\n    function MultiplyNumber(num1) {\r\n        console.log(typeof this + ' : ' + num1);\r\n        setnumber(num1);\r\n        setoperator('x');\r\n        setdisplay(0);\r\n    }\r\n\r\n    function DivideNumber(num1) {\r\n        console.log(typeof this + ' : ' + num1);\r\n        setnumber(num1);\r\n        setoperator('/');\r\n        setdisplay(0);\r\n    }\r\n\r\n    function AddDecimal(num1) {\r\n        num1 = num1 + '.';\r\n        console.log(typeof this + ' : ' + num1);\r\n        setnumber(num1);\r\n        setdisplay(num1);\r\n    }\r\n\r\n    function Equal(num2) {\r\n        setnumber(parseFloat(number1));\r\n        num2 = parseFloat(num2);\r\n        console.log('Number 1 : ' + number1);\r\n        console.log('Number 2 : ' + num2);\r\n        switch (operator) {\r\n            case '+':\r\n                setdisplay(number1 + num2);\r\n                break;\r\n            case '-':\r\n                setdisplay(number1 - num2);\r\n                break;\r\n            case 'x':\r\n                setdisplay(number1 * num2);\r\n                break;\r\n            case '/':\r\n                if(num2 == 0){\r\n                    setdisplay(\"Cannot Divide by 0\");\r\n                }\r\n                else{\r\n                    setdisplay(number1 / num2);\r\n                }\r\n                break;\r\n            default:\r\n                setdisplay(displayValue);\r\n        }\r\n        setoperator('');\r\n    }\r\n\r\n    function SetNumber(num) {\r\n        setdisplay('' + displayValue + num);\r\n    }\r\n\r\n    function Clear() {\r\n        SetNumber(0);\r\n        setdisplay(0);\r\n        setoperator('');\r\n    }\r\n\r\n    return (\r\n            <div className=\"container\">\r\n                <input type=\"textbox\" className=\"display\" onChange={(e) => setdisplay(e.target.value)} value={displayValue} readOnly />\r\n                <br/>\r\n                {\r\n                    listofnum.map(n => (\r\n                        <button className=\"btn\" key={n} onClick={() => SetNumber(parseFloat(n))} >{n}</button>\r\n                    ))\r\n                }\r\n\r\n                <button className=\"btn\" onClick={() => AddDecimal(parseFloat(displayValue))} >.</button>\r\n                <button className=\"btn\" onClick={() => AddNumber(parseFloat(displayValue))} >+</button>\r\n                <button className=\"btn\" onClick={() => DiffNumber(parseFloat(displayValue))} >-</button>\r\n                <button className=\"btn\" onClick={() => MultiplyNumber(parseFloat(displayValue))} >x</button>\r\n                <button className=\"btn\" onClick={() => DivideNumber(parseFloat(displayValue))} >/</button>\r\n                <button className=\"btn\" onClick={() => Equal(parseFloat(displayValue))} >=</button>\r\n                <button className=\"btn clear\" onClick={() => Clear()} >Clear</button>\r\n            </div>\r\n           );\r\n}\r\n\r\nexport default InputBox;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport InputBox from './calculator';\r\nimport Test from './calculator';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <InputBox />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}